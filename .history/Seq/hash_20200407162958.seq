from globals import *


class Hash:
    Status: str
    hash: int

    def __init__(self: Hash, hash: int, status: str):
        self.hash = hash
        self.status = status

class Minimizer:
	hash: Hash
	loc: int
    def __init__(self: Minizer, hash: Hash, loc: int):
        self.hash = hash
        self.loc = loc
class Sequence:
	name: str
	seq: str
	is_rc: bool

	def __init__(self: Sequence, name: str, seq: str, is_rc: bool):
        self.name = name
        self.seq = seq
        self.is_rc = is_rc


class Index:
	kmer_size: int 
	window_size: int
	threshold: int

	Sequence seq

	minimizers: list[Minimizer]
    index: dict[Hash, list[int]]

	def __init__(self:Index,seq: Sequence, kmer_size: int, window_size: int, separate_lowercase: bool):
        self.seq = seq
        self.kmer_size = kmer_size
        self.window_size = window_size

        assert(kmer_size <= 16)
        minimizers = get_minimizers(seq, kmer_size, window_size, separate_lowercase)

        for i in minimizers:
            index.setdefault(i.hash,list[int]()).append(i.loc)
        h = Hash()
        ignore = (minimizers.size() * h.INDEX_CUTOFF) / 100.0

        

	// Find first minimizer at loci p
	def find_minimizers(p:int):


    
	int ignore = (minimizers.size() * Hash.INDEX_CUTOFF) / 100.0;
	
	map<int, int> hist;
	for (auto &i: index) {
		hist[i.second.size()] += 1;
	}
	int sum = 0;
	threshold = 1 << 31;
	int j = 0;
	for (auto i = hist.rbegin(); i != hist.rend(); i++, j++) {
		sum += i->second;
		if (sum <= ignore) { 
			threshold = i->first;
		} else { 
			break;
		}
	}
}
