# class DNA:
#     val: str
    
# 	constexpr DNA(int def): val():
#     {
# 		for i in range(128):
#              val = val + def
# 		val['A'] = val['a'] = 0;
# 		val['C'] = val['c'] = 1;
# 		val['G'] = val['g'] = 2;
# 		val['T'] = val['t'] = 3;
#     }
	

# def dna_hash_lookup()  = DNA(0)
# def dna_align_lookup() = DNA(4)

# struct RDNA:
# 	char val[128];
# 	constexpr RDNA(): val()
	
# 		for (int i = 0; i < 128; i++) val[i] = 'N';
# 		val['A'] = 'T'; val['a'] = 't';
# 		val['C'] = 'G'; val['c'] = 'g';
# 		val['G'] = 'C'; val['g'] = 'c';
# 		val['T'] = 'A'; val['t'] = 'a';
	

# constexpr auto rev_comp_lookup = RDNA();

def hash_dna(c:seq) -> int:
	return int(c.__int__())#dna_hash_lookup.val[c]


def align_dna(c):
 	return int(seq(c))#dna_align_lookup.val[c]

def rev_dna(c):

 	return str(~seq(c))#rev_comp_lookup.val[c]


# template<class X, class Y>
# inline bool in_map(const X &m, Y k):
# 	return m.find(k) != m.end()






def pct(p: float, tot: float):
    return 100*p/tot