class Interval:
    low: int
    high: int
class ITNode:
    i: Interval
    max: int
    left: ITNode
    right: ITNode
    def __init__(self: ITNode,i:Interval, left: ITNode, right:ITNode):
        self.i =i
        self.max = i.high
        self.left = left
        self.right = right
    


class Tree:
    root: ITNode
    def __init__(self: Tree):
        r = None
    def newNode(self: Tree, i: Interval):
        t = ITNode(i,None, None)
        
        return t
    def insert(self: Tree,root:ITNode, i: Interval):
        if (root is None):
            root = self.newNode(i)
            return root
        l = root.i.low
        if (i.low < l):
            root.left = self.insert(root.left,i)
        else:
            root.right = self.insert(root.right,i)
        
        if (root.max < i.high):
            root.max = i.high
        return root
    def doOverlap(self:Tree,i1: Interval, i2: Interval):
        if (i1.low<=i2.high and i2.low <= i1.high):
            return True
        return False
        
    def overlapSearch(self:Tree,root: ITNode, i:Interval):
        if (root is None):
            return None
        if (self.doOverlap(root.i,i)):
            return root.i
        if (not(root.left is None) and root.left.max >= i.low):
            return self.overlapSearch(root.left, i)
        return self.overlapSearch(root.right, i)
        
i=Interval(2,5)
i2 = Interval(3,9)
k = Tree()
k.insert(k.root,i)
k.insert(k.root,i2)
i3=Interval(4,6)
print f'{k.overlapSearch(k.root,i3)}'

'''
#include <iostream> 
using namespace std; 

// Structure to represent an interval 
struct Interval 
{ 
	int low, high; 
}; 

// Structure to represent a node in Interval Search Tree 
struct ITNode 
{ 
	Interval *i; // 'i' could also be a normal variable 
	int max; 
	ITNode *left, *right; 
}; 

// A utility function to create a new Interval Search Tree Node 
ITNode * newNode(Interval i) 
{ 
	ITNode *temp = new ITNode; 
	temp->i = new Interval(i); 
	temp->max = i.high; 
	temp->left = temp->right = NULL; 
}; 

// A utility function to insert a new Interval Search Tree Node 
// This is similar to BST Insert. Here the low value of interval 
// is used tomaintain BST property 
ITNode *insert(ITNode *root, Interval i) 
{ 
	// Base case: Tree is empty, new node becomes root 
	if (root == NULL) 
		return newNode(i); 

	// Get low value of interval at root 
	int l = root->i->low; 

	// If root's low value is smaller, then new interval goes to 
	// left subtree 
	if (i.low < l) 
		root->left = insert(root->left, i); 

	// Else, new node goes to right subtree. 
	else
		root->right = insert(root->right, i); 

	// Update the max value of this ancestor if needed 
	if (root->max < i.high) 
		root->max = i.high; 

	return root; 
} 

// A utility function to check if given two intervals overlap 
bool doOVerlap(Interval i1, Interval i2) 
{ 
	if (i1.low <= i2.high && i2.low <= i1.high) 
		return true; 
	return false; 
} 

// The main function that searches a given interval i in a given 
// Interval Tree. 
Interval *overlapSearch(ITNode *root, Interval i) 
{ 
	// Base Case, tree is empty 
	if (root == NULL) return NULL; 

	// If given interval overlaps with root 
	if (doOVerlap(*(root->i), i)) 
		return root->i; 

	// If left child of root is present and max of left child is 
	// greater than or equal to given interval, then i may 
	// overlap with an interval is left subtree 
	if (root->left != NULL && root->left->max >= i.low) 
		return overlapSearch(root->left, i); 

	// Else interval can only overlap with right subtree 
	return overlapSearch(root->right, i); 
} 

void inorder(ITNode *root) 
{ 
	if (root == NULL) return; 

	inorder(root->left); 

	cout << "[" << root->i->low << ", " << root->i->high << "]"
		<< " max = " << root->max << endl; 

	inorder(root->right); 
} 

// Driver program to test above functions 
int main() 
{ 
	// Let us create interval tree shown in above figure 
	Interval ints[] = {{15, 20}, {10, 30}, {17, 19}, 
		{5, 20}, {12, 15}, {30, 40} 
	}; 
	int n = sizeof(ints)/sizeof(ints[0]); 
	ITNode *root = NULL; 
	for (int i = 0; i < n; i++) 
		root = insert(root, ints[i]); 

	cout << "Inorder traversal of constructed Interval Tree is\n"; 
	inorder(root); 

	Interval x = {6, 7}; 

	cout << "\nSearching for interval [" << x.low << "," << x.high << "]"; 
	Interval *res = overlapSearch(root, x); 
	if (res == NULL) 
		cout << "\nNo Overlapping Interval"; 
	else
		cout << "\nOverlaps with [" << res->low << ", " << res->high << "]"; 
	return 0; 
} 





'''