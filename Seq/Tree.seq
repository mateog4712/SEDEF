class Interval:
	low: int
	high: int
	def __str__(self: Interval):
		return f'{self.low}\t{self.high}'

	def __eq__(i:Interval,j:Interval):
		if i.low == j.low and i.high == j.high:
			return True
		return False



class ITNode:
	i: Interval
	max: int
	left: ITNode
	right: ITNode
	def __init__(self: ITNode,i:Interval, left: ITNode, right:ITNode):
		self.i =i
		self.max = i.high
		self.left = left
		self.right = right
		#optional[ITNode], optional[ITNode]
	def __init__(self: ITNode,i:Interval):
		self.i =i
		self.max = i.high
		self.left = None
		self.right = None
	# def __init__(self: ITNode):
	#     self.i = None
	#     self.max = -2
	#     self.left = None
	#     self.right = None
	def __str__(self: ITNode):
		return f'{self.i}'

	def __eq__(i:ITNode,j:ITNode):
		if i.i == j.i:
			return True
		return False




# def __str__(i: None):
#     return " "
# def newNode(i: Interval):
# 	t = ITNode(i,None, None)
# 	return t

# def insert(root, i):
# 	if not (root):
# 		root = ITNode(i)
# 		print f'here {root}'
# 		return root
# 	l = root.i.low
# 	if (i.low < l):
# 		root.left = insert(root.left,i)
# 	else:
# 		root.right = insert(root.right,i)
	
# 	if (root.max < i.high):
# 		root.max = i.high
# 	return root

# def doOverlap(i1: Interval, i2: Interval):
# 	if (i1.low<=i2.high and i2.low <= i1.high):
# 		return True
# 	return False
# def overlapSearch(root: ITNode, i:Interval, l: list[Interval]) -> list[Interval]:
# 	# print f'{root}'
# 	if not (root):
# 		return l
# 	if (doOverlap(root.i,i)):
# 		l.append(root.i)
# 		# return root.i
# 	if ((root.left) and root.left.max >= i.low):
# 		overlapSearch(root.left, i,l)
# 	overlapSearch(root.right, i,l)
# 	return l

# def isprintaj(root):
# 	k =root
# 	s = "Left:"
# 	while k:
# 		s+= f'{k}\t'
# 		k=k.left
# 	s += "Right:"
# 	k =root.right
# 	while k:
# 		s+= f'{k}\t'
# 		k=k.right
# 	return s
# 	return s




class Tree:
	root: ITNode
	rootRef: ITNode
	pairs: set[tuple[Interval,Interval] ]
	def __init__(self: Tree):
		self.root = None
		self.rootRef = None
		pairs = set[tuple[Interval,Interval] ]()
	def newNode(self: Tree, i: Interval):
		t = ITNode(i)
		return t
	def insert1(self: Tree, i: Interval, i_ref: Interval):
		self.insert(self.rootRef,i_ref)
		self.insert(self.root,i)
		self.pairs.add((i,i_ref))
	def insert(self: Tree,root:ITNode, i: Interval):
		print f'ok'
		if (not self.root):
			self.root = self.newNode(i)
			return root
		if (not self.rootRef):
			self.root = self.newNode(i)
			return root
		if (not root):
			root = self.newNode(i)
			# print root
			return root
		l = root.i.low
		if (i.low < l):
			root.left = self.insert(root.left,i)
		else:
			root.right = self.insert(root.right,i)
		
		if (root.max < i.high):
			root.max = i.high
		return root
	def doOverlap(self:Tree,i1: Interval, i2: Interval):
		if (i1.low<=i2.high and i2.low <= i1.high):
			return True
		return False
	def doOverlapOne(self:Tree,i2: Interval,i1: int):
		if (i1<=i2.high and i1 <= i2.low):
			return True
		return False
	def overlapSearch1(self:Tree ,i:Interval,l:list[Interval],is_root: bool) -> list[Interval]:
		m=list[Interval]()
		if (is_root):
			m = self.overlapSearch(self.rootRef, i,l)
		else:
			m = self.overlapSearch(self.root, i,l)
		return m
	def overlapSearch(self:Tree,root: ITNode, i:Interval,l:list[Interval]):
		if not (root):
			return l
		if (self.doOverlap(root.i,i)):
			l.append(root.i)
			# return root.i
		if ((root.left) and root.left.max >= i.low):
			self.overlapSearch(root.left, i,l)
		self.overlapSearch(root.right, i,l)
		return l
	def find(self:Tree ,i:int,is_ref: bool) -> list[Interval]:
		l = list[Interval]()
		m=list[Interval]()
		if (is_ref):
			m = self.overlapSearch(self.rootRef, i,l)
		else:
			m = self.overlapSearch(self.root, i,l)
		return m
	def find1(self:Tree,root: ITNode, i:int,l:list[Interval]):
		if not (root):
			return l
		if (self.doOverlapOne(root.i,i)):
			l.append(root.i)
			# return root.i
		if ((root.left) and root.left.max >= i.low):
			self.find1(root.left, i,l)
		self.find1(root.right, i,l)
		return l
	def __str__(self:Tree):
		k =self.root
		s = "Left:"
		while k:
			s+= f'{k}\t'
			k=k.left
		s += "Right:"
		k =self.root.right
		while k:
			s+= f'{k}\t'
			k=k.right
		return s
		

# i=Interval(2,5)
# i2 = Interval(3,9)
# i4 = Interval(66,666)
# i3=Interval(2,6)

# t = Tree()
# t.insert1(i)
# t.insert1(i2)
# t.insert1(i4)

# l = list[Interval]()
# m = t.overlapSearch1(i3,l)
# print f'{t}'
# print "Overlap:"
# for i in m:	
# 	print i
# print f'{t}'
# i=Interval(2,5)
# i2 = Interval(3,9)

# root = ITNode(Interval(1,2))
# insert(root,i)
# insert(root,i2)
# i3=Interval(2,6)
# l = list[Interval]()
# m = overlapSearch(root,i3,l)
# print "Overlap:"
# for i in m:	
# 	print i
# print f'{isprintaj(root)}'


# if not (m is None):
#     print f'{m}'

'''
#include <iostream> 
using namespace std; 

// Structure to represent an interval 
struct Interval 
{ 
	int low, high; 
}; 

// Structure to represent a node in Interval Search Tree 
struct ITNode 
{ 
	Interval *i; // 'i' could also be a normal variable 
	int max; 
	ITNode *left, *right; 
}; 

// A utility function to create a new Interval Search Tree Node 
ITNode * newNode(Interval i) 
{ 
	ITNode *temp = new ITNode; 
	temp->i = new Interval(i); 
	temp->max = i.high; 
	temp->left = temp->right = NULL; 
}; 

// A utility function to insert a new Interval Search Tree Node 
// This is similar to BST Insert. Here the low value of interval 
// is used tomaintain BST property 
ITNode *insert(ITNode *root, Interval i) 
{ 
	// Base case: Tree is empty, new node becomes root 
	if (root == NULL) 
		return newNode(i); 

	// Get low value of interval at root 
	int l = root->i->low; 

	// If root's low value is smaller, then new interval goes to 
	// left subtree 
	if (i.low < l) 
		root->left = insert(root->left, i); 

	// Else, new node goes to right subtree. 
	else
		root->right = insert(root->right, i); 

	// Update the max value of this ancestor if needed 
	if (root->max < i.high) 
		root->max = i.high; 

	return root; 
} 

// A utility function to check if given two intervals overlap 
bool doOVerlap(Interval i1, Interval i2) 
{ 
	if (i1.low <= i2.high && i2.low <= i1.high) 
		return true; 
	return false; 
} 

// The main function that searches a given interval i in a given 
// Interval Tree. 
Interval *overlapSearch(ITNode *root, Interval i) 
{ 
	// Base Case, tree is empty 
	if (root == NULL) return NULL; 

	// If given interval overlaps with root 
	if (doOVerlap(*(root->i), i)) 
		return root->i; 

	// If left child of root is present and max of left child is 
	// greater than or equal to given interval, then i may 
	// overlap with an interval is left subtree 
	if (root->left != NULL && root->left->max >= i.low) 
		return overlapSearch(root->left, i); 

	// Else interval can only overlap with right subtree 
	return overlapSearch(root->right, i); 
} 

void inorder(ITNode *root) 
{ 
	if (root == NULL) return; 

	inorder(root->left); 

	cout << "[" << root->i->low << ", " << root->i->high << "]"
		<< " max = " << root->max << endl; 

	inorder(root->right); 
} 

// Driver program to test above functions 
int main() 
{ 
	// Let us create interval tree shown in above figure 
	Interval ints[] = {{15, 20}, {10, 30}, {17, 19}, 
		{5, 20}, {12, 15}, {30, 40} 
	}; 
	int n = sizeof(ints)/sizeof(ints[0]); 
	ITNode *root = NULL; 
	for (int i = 0; i < n; i++) 
		root = insert(root, ints[i]); 

	cout << "Inorder traversal of constructed Interval Tree is\n"; 
	inorder(root); 

	Interval x = {6, 7}; 

	cout << "\nSearching for interval [" << x.low << "," << x.high << "]"; 
	Interval *res = overlapSearch(root, x); 
	if (res == NULL) 
		cout << "\nNo Overlapping Interval"; 
	else
		cout << "\nOverlaps with [" << res->low << ", " << res->high << "]"; 
	return 0; 
} 





'''