from hash import *
#from align import *
class Hit:
    query: Sequence
    query_start: int
    query_end: int
    ref: Sequence
    ref_start: int
    ref_end: int
    jaccard: int
    name: str
    comment: str
    #aln: Alignment
    def __init__(self:Hit, query:Sequence, query_start:int, query_end:int, ref:Sequence, ref_start:int, ref_end:int, jaccard:int, name:str, comment:str):
        self.query = query
        self.query_start = query_start
        self.query_end = query_end
        self.ref = ref
        self.ref_start = ref_start
        self.ref_end = ref_end
        self.jaccard = jaccard
        self.name = name
        self.comment = ""
        #self.aln = aln

    
    def from_bed(bed,cigar):
        ss = bed.split()
        assert(len(ss)>=10)
        h = Hit(Sequence(ss[0],"",(ss[8])[0] != '+'),0,0, Sequence(ss[3],"",(ss[0])[0] != '+'),0,0,0,"","")
        h.query_start = int(ss[1])
        h.query_end = int(ss[2])
        h.ref_start = int(ss[4])
        h.ref_end = int(ss[5])
        h.name = ss[6]
        if(len(ss)>=15):
            h.comment = ss[14]
        if(len(ss)>=14):
            h.jaccard = int(ss[13])
        if(len(ss)>=13):
            cigar = ss[12]
        return h 
        

    def from_bed2(bed: str,query: Sequence,ref: Sequence):
        ss = bed.split()
        assert(len(ss)>=10)

        h = Hit(query,0,0,ref,0,0,0,"","")
        h.query_start = int(ss[1])
        h.query_end = int(ss[2])
        h.ref_start = int(ss[4])
        h.ref_end = int(ss[5])
        assert(h.query.is_rc == (ss[8][0] != '+'))
        assert(h.ref.is_rc == (ss[9][0] != '+'))

        assert(~h.query.is_rc)
        if(h.ref.is_rc):
            temp = h.ref_start
            h.ref_start = h.ref_end
            h.ref_end = temp
            seq_len = len(h.ref.seq)
            h.ref_start = seq_len - h.ref_start + 1
            h.ref_end = seq_len = h.ref_end + 1
        
        h.name = ss[6]
        if(len(ss)>=14):
            h.jaccard = int(ss[13])
        # if(len(ss)>=13):
        #     h.aln = Alignment(query.seq,ref.seq,ss[12])

        return h

    def from_wgac(bed):
        ss = bed.split()
        assert(len(ss)>=27)
        h = Hit(Sequence(ss[0],"",False),0,0, Sequence(ss[6],"",(ss[5])[0] != '+'),0,0,0,"","")
        h.query_start = ss[1]
        h.query_end = ss[2]
        h.ref_start = ss[7]
        h.ref_end = ss[8]
        h.name = ss[16]
        h.comment = "err=.1f"
        #fmt::format("err={:.1f}", 100 - 100 * atof(ss[26].c_str()))
        assert(h.ref.is_rc == ((ss[5])[0] != '+'))
        assert(~h.query.is_rc)
        
        return h
    
    def to_bed(self: Hit, do_rc:bool, with_cigar:bool, file:str):
        assert(~self.query.is_rc)
        qn = self.query.name
        rn = self.ref.name
        rs = 0
        if(do_rc and self.ref.is_rc):
            rs = len(self.ref.seq) - self.ref_end + 1
        else:
            rs = self.ref_start
        re = 0
        if(do_rc and self.ref.is_rc):
            re = len(self.ref.seq) - self.ref_start + 1
        else:
            re = self.ref_end
    
    def extends(self: Hit, factor: float, max_entend:int):
        w = max(self.query_end-self.query_start,self.ref_end-self.ref_start)
        w = min(max_entend,int(w*factor))
        self.query_start = max(0,self.query_start-w)
        self.query_end += w
        self.ref_start = max(0,self.ref_start-w)
        self.ref_end += w
    
    # def update_from_alignment(self: Hit):
    #     self.query_start = self.aln.start_a
    #     self.query_end = self.aln.end_a
    #     self.ref_start = self.aln.start_b
    #     self.ref_end = self.aln.end_a




def get_position():
    print('yes')
